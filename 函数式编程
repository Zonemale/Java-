一、函数式接口
	1. 
概念：有且仅有一个抽象方法的接口，函数式接口，即适用于函数式编程场景的接口。而Java中的函数式编程体现就是Lambda，所以函数式接口就是可 以适用于Lambda使用的接口。只有确保接口中有且仅有一个抽象方法，Java中的Lambda才能顺利地进行推导。

		* 
语法糖：是指使用更加方便，但是原理不变的代码语法。
	2. 
格式：（只要确保接口中有且仅有一个抽象方法即可）



修饰符 interface 接口名称{
    public abstract 返回值类型 方法名称（可选参数信息）;
    //其它非抽象方法内容
}
	1. 
@FunctionalInterface注解

		1. 
与@Override注解的作用类似，Java8中专门为函数式接口引入了一个新的注解：@FunctionalInterface。该注解可用于一个接口的定义上



@FunctionalInterface
public interface MyFunctionalInterface { 
    void myMethod();      
}
	* 
注：一旦使用该注解来定义接口，编译器将会强制检查该接口是否确实有且仅有一个抽象方法，否则将会报错。即使不使用该注解，只要满足函数式接口的定义，这仍然是一个函数式接口。


二、函数式编程
	1. 
Lambda的延迟执行

		1. 
有些场景的代码执行后，结果不一定会被使用，从而造成性能浪费。而Lambda表达式是延迟执行的，这正好可以作伪解决方案，提升性能
		2. 
性能浪费日志案例

			* 
注:日志可以帮助我们快速的定位问题，记录程序运行过程中的情况，以便项目的监控和优化



public class Example2 {
    public static void method(int a,String msg){
        if(a == 1){
            System.out.println(msg);
        }
    }
    public static void main(String[] args) {
        String str1 = "Hello";
        String str2 = "what";
        String str3 = "world";

        method(1,str1 + str2 + str3);
    }
}
这段代码存在问题：无论级别是否满足要求，作为 log 方法的第二个参数，三个字符串一定会首先被拼接并传入方 法内，然后才会进行级别判断。如果级别不符合要求，那么字符串的拼接操作就白做了，存在性能浪费

		1. 
Lambda更优写法：



@FunctionalInterface
public interface MyInterface {
    void method();
}

public class Demo {
    public static void main(String[] args) {
        String s1 = "what";
        String s2 = "is";
        String s3 = "fuck";

        mainMethod(1,() -> System.out.println(s1 + s2 + s3));

    }

    public static void mainMethod(int flag, MyInterface face){
        if(flag == 1){
            face.method();
        }
    }
}

注：实际上使用内部类也可以达到同样的效果，只是将代码操作延迟到了另一个对象当中通过调用方法来完成，而是否调用其所在方法是在条件判断之后才执行的
	1. 
使用Lambda作为参数和返回值



使用Lambda表达式作为方法参数，其实就是使用函数式 接口作为方法参数。
public class Example4 {
    public static void main(String[] args) {
        method(() -> System.out.println("waht"));
    }

    public static void method(Runnable run){
        new Thread().start();
    }
}

方法的返回值类型是一个函数式接口
public class Example6 {
    public static void main(String[] args) {
        String[] array = {"abc","abcde","ecdbafs"};
        System.out.println(Arrays.toString(array));
        Arrays.sort(array,newComparator());
        System.out.println(Arrays.toString(array));
    }

    public static Comparator<String> newComparator(){
        return (a,b) -> b.length() - a.length();
    }
}
三、常用函数式接口
	* 
Supplier接口

		* 
java.util.function.Supplier<T> 接口仅包含一个无参的方法：
		* 
T get() 。用来获取一个泛型参数指定类型的对象数据，由于这是一个函数式接口，这也就意味着对应的Lambda表达式需要“对外提供”一个符合泛型类型的对象 数据。



public class Example7 {
    public static void main(String[] args) {
        String s = getString(() -> {
            return "Supplier<T>接口是用来获取泛型参数获取指定类型的参数";
        });

        System.out.println(s);
    }

    public static String getString(Supplier<String> sup){
        return sup.get();
    }
}
	* 
Consumer接口

		* 
java.util.function.Consumer<T> 接口则正好与Supplier接口相反，它不是生产一个数据，而是消费一个数据， 其数据类型由泛型决定。（消费也可以理解为使用，需要自定义消费方式）
		* 
Consumer 接口中包含抽象方法 void accept(T t) ，意为消费一个指定泛型的数据。



public class Example9 {
    public static void main(String[] args) {
        method(s -> System.out.println(s));
    }

    public static void method(Consumer<String> s){
        s.accept("没你根本不重要");
    }
}

		* 
消费数据的时候，首先做一个操作， 然后再做一个操作，实现组合。而这个方法就是 Consumer 接口中的default方法 andThen，该方法参数是一个Consumer接口，返回调用该方法的接口和参数接口两个Consumer接口的组合



public class Example11 {
    public static void main(String[] args) {
        method("时针一直倒数着",
                (t) -> {
                    System.out.println(t);
                },
                (t) -> {
                    String res = new StringBuilder(t).reverse().toString();
                    System.out.println(res);
                }
                );
    }

    public static void method(String s, Consumer<String> con1, Consumer<String> con2){
        con1.andThen(con2).accept(s);//con1在前边，所以先执行cong1的方法后执行con2的方法
    }
}

	* 
Predicate接口

		* 
有时候我们需要对某种类型的数据进行判断，从而得到一个boolean值结果。
		* 
Predicate 接口中包含一个抽象方法： boolean test(T t) 。用于条件判断的场景



public class Example13 {
    public static void main(String[] args) {
        boolean flag = method("HelloWorld",(str) -> {
            return str.length() > 5 ? true : false;
        });
        System.out.println("字符串很长吗？" + flag);
    }

    public static boolean method(String str, Predicate<String> predicate){
        boolean varyLong = predicate.test(str);
        return varyLong;
    }
}

		* 
默认方法：and,既然是条件判断，就会存在与、或、非三种常见的逻辑关系。其中将两个 Predicate 条件使用“与”逻辑连接起来实 现“并且”的效果时，可以使用default方法 and



public class Example14 {
    public static void main(String[] args) {
        method((str) -> {return str.contains("s");},(str) -> {return str.contains("b");},"sfdiuhgjjgldsjab");
    }

    public static void method(Predicate<String> p1, Predicate<String> p2, String str){
        boolean what = p1.and(p2).test(str);
        System.out.println("什么话都别说" + what);
    }
}


		* 
默认方法：or，与 and 的“与”类似，默认方法 or 实现逻辑关系中的“或”。
		* 
默认方法：negate“与”、“或”已经了解了，剩下的“非”（取反）也会简单。


四、Function接口
	* 
概述：java.util.function.Function<T,R> 接口用来根据一个类型的数据得到另一个类型的数据，前者称为前置条件， 后者称为后置条件。(Function的前置条件泛型和后置条件泛型可以相同）
	* 
抽象方法：apply，   Function 接口中主要的抽象方法为： R apply(T t) ，根据类型T的参数获取类型R的结果。



public class Example15 {
    public static void main(String[] args) {
        change("12421",(String s) -> {
            return Integer.parseInt(s);
        });
    }

    public static void change(String str, Function<String,Integer> fun){
        Integer temp = fun.apply(str);
        System.out.println(temp);
    }
}
	* 
默认方法：andThen,Function 接口中有一个默认的 andThen 方法，用来进行组合操作



public class Example16 {
    public static void main(String[] args) {
        change((str) -> {
            ArrayList<Character> chList = new ArrayList<>();
                    for (char en : str.toCharArray()) {
                        chList.add(en);
                    }
                    return chList;
        },
                (ArrayList<Character> list) -> {
            int sum = 0;
                    for (Character ch : list) {
                        sum += (int)ch;
                    }
                    return sum;
                });
    }

    public static void change(Function<String,ArrayList<Character>> one, Function<ArrayList<Character>,Integer> two){
        int res = one.andThen(two).apply("what\'s up");
        System.out.println(res);
    }
}







































































